{"ast":null,"code":"import React from \"react\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar screen = Dimensions.get(\"window\");\nvar buttonWidth = screen.width / 4;\nvar styles = StyleSheet.create({\n  text: {\n    color: \"#1572A1\",\n    fontSize: 25\n  },\n  textSecondary: {\n    color: \"#060606\"\n  },\n  button: {\n    backgroundColor: \"#9AD0EC\",\n    flex: 1,\n    height: Math.floor(buttonWidth - 10),\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderRadius: Math.floor(buttonWidth),\n    margin: 5\n  },\n  buttonDouble: {\n    width: screen.width / 2 - 10,\n    flex: 0,\n    alignItems: \"flex-start\",\n    paddingLeft: 40\n  },\n  buttonSecondary: {\n    backgroundColor: \"#a6a6a6\"\n  },\n  buttonAccent: {\n    backgroundColor: \"#f09a36\"\n  }\n});\nexport default (function (_ref) {\n  var onPress = _ref.onPress,\n      text = _ref.text,\n      size = _ref.size,\n      theme = _ref.theme;\n  var buttonStyles = [styles.button];\n  var textStyles = [styles.text];\n\n  if (size === \"double\") {\n    buttonStyles.push(styles.buttonDouble);\n  }\n\n  if (theme === \"secondary\") {\n    buttonStyles.push(styles.buttonSecondary);\n    textStyles.push(styles.textSecondary);\n  } else if (theme === \"accent\") {\n    buttonStyles.push(styles.buttonAccent);\n  }\n\n  return _jsx(TouchableOpacity, {\n    onPress: onPress,\n    style: buttonStyles,\n    children: _jsx(Text, {\n      style: textStyles,\n      children: text\n    })\n  });\n});","map":{"version":3,"sources":["/Users/andysetyawan/Documents/bootcamp-dw/week4/todoApps-v1/components/Button.js"],"names":["React","screen","Dimensions","get","buttonWidth","width","styles","StyleSheet","create","text","color","fontSize","textSecondary","button","backgroundColor","flex","height","Math","floor","alignItems","justifyContent","borderRadius","margin","buttonDouble","paddingLeft","buttonSecondary","buttonAccent","onPress","size","theme","buttonStyles","textStyles","push"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;AAGA,IAAMC,MAAM,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAf;AACA,IAAMC,WAAW,GAAGH,MAAM,CAACI,KAAP,GAAe,CAAnC;AAEA,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC7BC,EAAAA,IAAI,EAAE;AACFC,IAAAA,KAAK,EAAE,SADL;AAEFC,IAAAA,QAAQ,EAAE;AAFR,GADuB;AAK7BC,EAAAA,aAAa,EAAE;AACXF,IAAAA,KAAK,EAAE;AADI,GALc;AAQ7BG,EAAAA,MAAM,EAAE;AACJC,IAAAA,eAAe,EAAE,SADb;AAEJC,IAAAA,IAAI,EAAE,CAFF;AAGJC,IAAAA,MAAM,EAAEC,IAAI,CAACC,KAAL,CAAWd,WAAW,GAAG,EAAzB,CAHJ;AAIJe,IAAAA,UAAU,EAAE,QAJR;AAKJC,IAAAA,cAAc,EAAE,QALZ;AAMJC,IAAAA,YAAY,EAAEJ,IAAI,CAACC,KAAL,CAAWd,WAAX,CANV;AAOJkB,IAAAA,MAAM,EAAE;AAPJ,GARqB;AAiB7BC,EAAAA,YAAY,EAAE;AACVlB,IAAAA,KAAK,EAAEJ,MAAM,CAACI,KAAP,GAAe,CAAf,GAAkB,EADf;AAEVU,IAAAA,IAAI,EAAE,CAFI;AAGVI,IAAAA,UAAU,EAAE,YAHF;AAIVK,IAAAA,WAAW,EAAE;AAJH,GAjBe;AAuB7BC,EAAAA,eAAe,EAAE;AACbX,IAAAA,eAAe,EAAE;AADJ,GAvBY;AA0B7BY,EAAAA,YAAY,EAAE;AACVZ,IAAAA,eAAe,EAAE;AADP;AA1Be,CAAlB,CAAf;AAgCA,gBAAe,gBAAkC;AAAA,MAAhCa,OAAgC,QAAhCA,OAAgC;AAAA,MAAvBlB,IAAuB,QAAvBA,IAAuB;AAAA,MAAjBmB,IAAiB,QAAjBA,IAAiB;AAAA,MAAXC,KAAW,QAAXA,KAAW;AAC7C,MAAMC,YAAY,GAAG,CAACxB,MAAM,CAACO,MAAR,CAArB;AACA,MAAMkB,UAAU,GAAG,CAACzB,MAAM,CAACG,IAAR,CAAnB;;AAEA,MAAImB,IAAI,KAAK,QAAb,EAAsB;AAClBE,IAAAA,YAAY,CAACE,IAAb,CAAkB1B,MAAM,CAACiB,YAAzB;AACH;;AAED,MAAGM,KAAK,KAAK,WAAb,EAAyB;AACrBC,IAAAA,YAAY,CAACE,IAAb,CAAkB1B,MAAM,CAACmB,eAAzB;AACAM,IAAAA,UAAU,CAACC,IAAX,CAAgB1B,MAAM,CAACM,aAAvB;AACH,GAHD,MAGO,IAAIiB,KAAK,KAAK,QAAd,EAAuB;AAC1BC,IAAAA,YAAY,CAACE,IAAb,CAAkB1B,MAAM,CAACoB,YAAzB;AACH;;AAED,SACI,KAAC,gBAAD;AAAkB,IAAA,OAAO,EAAEC,OAA3B;AAAoC,IAAA,KAAK,EAAEG,YAA3C;AAAA,cACI,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEC,UAAb;AAAA,gBAA0BtB;AAA1B;AADJ,IADJ;AAKH,CApBD","sourcesContent":["import React from \"react\";\nimport { TouchableOpacity, StyleSheet, Text, Dimensions } from \"react-native\";\n\nconst screen = Dimensions.get(\"window\");\nconst buttonWidth = screen.width / 4;\n\nconst styles = StyleSheet.create({\n    text: {\n        color: \"#1572A1\",\n        fontSize: 25,\n    },\n    textSecondary: {\n        color: \"#060606\",\n    },\n    button: {\n        backgroundColor: \"#9AD0EC\",\n        flex: 1,\n        height: Math.floor(buttonWidth - 10),\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        borderRadius: Math.floor(buttonWidth),\n        margin: 5,\n    },\n    buttonDouble: {\n        width: screen.width / 2 -10,\n        flex: 0,\n        alignItems: \"flex-start\",\n        paddingLeft: 40,\n    },\n    buttonSecondary: {\n        backgroundColor: \"#a6a6a6\",\n    },\n    buttonAccent: {\n        backgroundColor: \"#f09a36\",\n    },\n\n});\n\nexport default ({onPress, text, size, theme}) => {\n    const buttonStyles = [styles.button];\n    const textStyles = [styles.text];\n\n    if (size === \"double\"){\n        buttonStyles.push(styles.buttonDouble);\n    }\n\n    if(theme === \"secondary\"){\n        buttonStyles.push(styles.buttonSecondary);\n        textStyles.push(styles.textSecondary);\n    } else if (theme === \"accent\"){\n        buttonStyles.push(styles.buttonAccent);\n    }\n\n    return (\n        <TouchableOpacity onPress={onPress} style={buttonStyles}>\n            <Text style={textStyles}>{text}</Text>\n        </TouchableOpacity>\n    );\n};"]},"metadata":{},"sourceType":"module"}