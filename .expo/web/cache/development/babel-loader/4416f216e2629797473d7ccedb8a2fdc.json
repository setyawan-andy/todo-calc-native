{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nexport var initialState = {\n  currentValue: \"0\",\n  operator: null,\n  previousValue: null\n};\nexport var handleNumber = function handleNumber(value, state) {\n  if (state.currentValue === \"0\") {\n    return {\n      currentValue: \"\" + value\n    };\n  }\n\n  return {\n    currentValue: \"\" + state.currentValue + value\n  };\n};\nexport var handleEqual = function handleEqual(state) {\n  var currentValue = state.currentValue,\n      previousValue = state.previousValue,\n      operator = state.operator;\n  var current = parseFloat(currentValue);\n  var previous = parseFloat(previousValue);\n  var resetState = {\n    operator: null,\n    previousValue: null\n  };\n\n  if (operator === \"/\") {\n    return {\n      currentValue: previous / current\n    };\n  }\n\n  if (operator === \"*\") {\n    return _objectSpread({\n      currentValue: previous * current\n    }, resetState);\n  }\n\n  if (operator === \"+\") {\n    return _objectSpread({\n      currentValue: previous + current\n    }, resetState);\n  }\n\n  if (operator === \"-\") {\n    return _objectSpread({\n      currentValue: previous - current\n    }, resetState);\n  }\n\n  return state;\n};\n\nvar calculator = function calculator(type, value, state) {\n  switch (type) {\n    case \"number\":\n      return handleNumber(value, state);\n\n    case \"operator\":\n      return {\n        operator: value,\n        previousValue: state.currentValue,\n        currentValue: \"0\"\n      };\n\n    case \"equal\":\n      return handleEqual(state);\n\n    case \"clear\":\n      return initialState;\n\n    case \"posneg\":\n      return {\n        currentValue: \"\" + parseFloat(state.currentValue) * -1\n      };\n\n    case \"percentage\":\n      return {\n        currentValue: \"\" + parseFloat(state.currentValue) * 0.01\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default calculator;","map":{"version":3,"sources":["/Users/andysetyawan/Documents/bootcamp-dw/week4/todoApps-v1/funcCalc/Calculator.js"],"names":["initialState","currentValue","operator","previousValue","handleNumber","value","state","handleEqual","current","parseFloat","previous","resetState","calculator","type"],"mappings":";;;;;;AAAA,OAAO,IAAMA,YAAY,GAAG;AACxBC,EAAAA,YAAY,EAAE,GADU;AAExBC,EAAAA,QAAQ,EAAE,IAFc;AAGxBC,EAAAA,aAAa,EAAE;AAHS,CAArB;AAMP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAQC,KAAR,EAAkB;AAC1C,MAAGA,KAAK,CAACL,YAAN,KAAuB,GAA1B,EAA8B;AAC1B,WAAO;AAAEA,MAAAA,YAAY,OAAKI;AAAnB,KAAP;AACH;;AAED,SAAO;AACHJ,IAAAA,YAAY,OAAKK,KAAK,CAACL,YAAX,GAA0BI;AADnC,GAAP;AAGH,CARM;AAUP,OAAO,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACD,KAAD,EAAW;AAClC,MAAQL,YAAR,GAAkDK,KAAlD,CAAQL,YAAR;AAAA,MAAsBE,aAAtB,GAAkDG,KAAlD,CAAsBH,aAAtB;AAAA,MAAqCD,QAArC,GAAkDI,KAAlD,CAAqCJ,QAArC;AAEA,MAAMM,OAAO,GAAGC,UAAU,CAACR,YAAD,CAA1B;AACA,MAAMS,QAAQ,GAAGD,UAAU,CAACN,aAAD,CAA3B;AACA,MAAMQ,UAAU,GAAG;AACfT,IAAAA,QAAQ,EAAE,IADK;AAEfC,IAAAA,aAAa,EAAE;AAFA,GAAnB;;AAKA,MAAGD,QAAQ,KAAK,GAAhB,EAAoB;AAChB,WAAO;AACHD,MAAAA,YAAY,EAAES,QAAQ,GAAGF;AADtB,KAAP;AAIH;;AAED,MAAGN,QAAQ,KAAK,GAAhB,EAAoB;AAChB;AACID,MAAAA,YAAY,EAAES,QAAQ,GAAGF;AAD7B,OAEOG,UAFP;AAIH;;AAED,MAAGT,QAAQ,KAAK,GAAhB,EAAoB;AAChB;AACID,MAAAA,YAAY,EAAES,QAAQ,GAAGF;AAD7B,OAEOG,UAFP;AAIH;;AAED,MAAGT,QAAQ,KAAK,GAAhB,EAAoB;AAChB;AACID,MAAAA,YAAY,EAAES,QAAQ,GAAGF;AAD7B,OAEOG,UAFP;AAIH;;AAED,SAAOL,KAAP;AACH,CAvCM;;AAyCP,IAAMM,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAOR,KAAP,EAAcC,KAAd,EAAwB;AACvC,UAAQO,IAAR;AACI,SAAK,QAAL;AACI,aAAOT,YAAY,CAACC,KAAD,EAAQC,KAAR,CAAnB;;AACJ,SAAK,UAAL;AACI,aAAO;AACHJ,QAAAA,QAAQ,EAAEG,KADP;AAEHF,QAAAA,aAAa,EAAEG,KAAK,CAACL,YAFlB;AAGHA,QAAAA,YAAY,EAAE;AAHX,OAAP;;AAKJ,SAAK,OAAL;AACI,aAAOM,WAAW,CAACD,KAAD,CAAlB;;AACJ,SAAK,OAAL;AACI,aAAON,YAAP;;AACJ,SAAK,QAAL;AACI,aAAO;AACHC,QAAAA,YAAY,OAAKQ,UAAU,CAACH,KAAK,CAACL,YAAP,CAAV,GAAiC,CAAC;AADhD,OAAP;;AAGJ,SAAK,YAAL;AACI,aAAO;AACHA,QAAAA,YAAY,OAAKQ,UAAU,CAACH,KAAK,CAACL,YAAP,CAAV,GAAiC;AAD/C,OAAP;;AAGJ;AACI,aAAOK,KAAP;AAtBR;AAwBH,CAzBD;;AA2BA,eAAeM,UAAf","sourcesContent":["export const initialState = {\n    currentValue: \"0\",\n    operator: null,\n    previousValue: null,\n};\n\nexport const handleNumber = (value, state) => {\n    if(state.currentValue === \"0\"){\n        return { currentValue: `${value}` };\n    }\n\n    return {\n        currentValue: `${state.currentValue}${value}`\n    };\n};\n\nexport const handleEqual = (state) => {\n    const { currentValue, previousValue, operator } = state;\n\n    const current = parseFloat(currentValue);\n    const previous = parseFloat(previousValue);\n    const resetState = {\n        operator: null,\n        previousValue: null\n    };\n\n    if(operator === \"/\"){\n        return {\n            currentValue: previous / current,\n            \n        };\n    }\n\n    if(operator === \"*\"){\n        return {\n            currentValue: previous * current,\n            ...resetState\n        };\n    }\n\n    if(operator === \"+\"){\n        return {\n            currentValue: previous + current,\n            ...resetState\n        };\n    }\n\n    if(operator === \"-\"){\n        return {\n            currentValue: previous - current,\n            ...resetState\n        };\n    }\n\n    return state;\n};\n\nconst calculator = (type, value, state) => {\n    switch (type){\n        case \"number\":\n            return handleNumber(value, state);\n        case \"operator\":\n            return {\n                operator: value,\n                previousValue: state.currentValue,\n                currentValue: \"0\"\n            };\n        case \"equal\":\n            return handleEqual(state);\n        case \"clear\":\n            return initialState;\n        case \"posneg\":\n            return {\n                currentValue: `${parseFloat(state.currentValue) * -1}`\n            };\n        case \"percentage\":\n            return {\n                currentValue: `${parseFloat(state.currentValue) * 0.01}`\n            };\n        default:\n            return state;\n    }\n};\n\nexport default calculator;"]},"metadata":{},"sourceType":"module"}